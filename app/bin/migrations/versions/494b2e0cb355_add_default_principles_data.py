"""Add default Principles data

Revision ID: 494b2e0cb355
Revises: 2b8154690bd1
Create Date: 2015-10-15 22:00:21.878010

"""

# revision identifiers, used by Alembic.
revision = '494b2e0cb355'
down_revision = '2b8154690bd1'

from alembic import op
import uuid
from sqlalchemy.sql import table, column
from sqlalchemy import String, Text, Boolean, Integer
from libraries.db import guid


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    # Insert roles
    from flask import current_app as app
    role_table = table('acl_role',
                       column('id', guid()),
                       column('name', String(255)),
                       column('parent_id', guid()))

    user_role_uuid = str(uuid.uuid4())
    owner_role_uuid = str(uuid.uuid4())
    super_user_role_uuid = str(uuid.uuid4())

    op.bulk_insert(role_table,
                   [
                       {
                           'id': user_role_uuid,
                           'name': app.config.get('DEFAULT_USER_ROLE')
                       }
                   ])

    op.bulk_insert(role_table,
                   [
                       {
                           'id': super_user_role_uuid,
                           'name': app.config.get('SUPER_USER_ROLE'),
                           'parent_id': user_role_uuid
                       },
                       {
                           'id': owner_role_uuid,
                           'name': app.config.get('OWNER_USER_ROLE'),
                           'parent_id': user_role_uuid
                       }
                   ])


    # Create users
    user_uuid = str(uuid.uuid4())
    super_user_uuid = str(uuid.uuid4())

    from werkzeug.security import generate_password_hash

    user_table = table('user',
                       column('id', guid()),
                       column('username', String(255)),
                       column('email', String(255)),
                       column('password', String(255))
                       )

    op.bulk_insert(user_table,
                   [
                       {
                           'id': super_user_uuid,
                           'username': 'superuser',
                           'email': 'superuser@consoto.com',
                           'password': generate_password_hash('P@ssword123')
                       },
                       {
                           'id': user_uuid,
                           'username': 'normal_user',
                           'email': 'user@consoto.com',
                           'password': generate_password_hash('P@ssword123')
                       }
                   ])

    # Create user_roles
    user_roles_table = table('acl_user_role',
                             column('user_id', guid()),
                             column('role_id', guid()))

    op.bulk_insert(user_roles_table,
                   [
                       {
                           'user_id': super_user_uuid,
                           'role_id': super_user_role_uuid
                       }
                   ])

    # Create roles_resources
    role_resource_table = table('acl_role_resource',
                                column('role_id', guid()),
                                column('resource_name', String(255)),
                                column('privilege', Integer),
                                column('permission', Integer))

    from models.acl import Privilege, AclResource
    from libraries.acl import Permission

    op.bulk_insert(role_resource_table,
                   [
                       {
                           'role_id': super_user_role_uuid,
                           'resource_name': '*',
                           'privilege': Privilege.ADD | Privilege.VIEW | Privilege.DELETE | Privilege.UPDATE,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': owner_role_uuid,
                           'resource_name': '*',
                           'privilege': Privilege.ADD | Privilege.VIEW | Privilege.DELETE | Privilege.UPDATE,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.PRODUCT,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.CATEGORY,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.USER,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       }
                   ])


    pass
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###

    role_table = table('acl_role')
    op.execute(role_table.delete())

    user_table = table('user')
    op.execute(user_table.delete())

    pass
    ### end Alembic commands ###

"""Add default Principles data

Revision ID: 494b2e0cb355
Revises: 2b8154690bd1
Create Date: 2015-10-15 22:00:21.878010

"""

# revision identifiers, used by Alembic.
revision = '494b2e0cb355'
down_revision = '2b8154690bd1'

from alembic import op
import uuid
from sqlalchemy.sql import table, column
from sqlalchemy import String, Text, Boolean, Integer
from libraries.db import guid


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    # Insert roles
    from flask import current_app as app
    role_table = table('acl_role',
                       column('id', guid()),
                       column('name', String(255)),
                       column('parent_id', guid()))

    user_role_uuid = str(uuid.uuid4())
    owner_role_uuid = str(uuid.uuid4())
    super_user_role_uuid = str(uuid.uuid4())

    op.bulk_insert(role_table,
                   [
                       {
                           'id': user_role_uuid,
                           'name': app.config.get('DEFAULT_USER_ROLE')
                       }
                   ])

    op.bulk_insert(role_table,
                   [
                       {
                           'id': super_user_role_uuid,
                           'name': app.config.get('SUPER_USER_ROLE'),
                           'parent_id': user_role_uuid
                       },
                       {
                           'id': owner_role_uuid,
                           'name': app.config.get('OWNER_USER_ROLE'),
                           'parent_id': user_role_uuid
                       }
                   ])


    # Create users
    user_uuid = str(uuid.uuid4())
    super_user_uuid = str(uuid.uuid4())

    from werkzeug.security import generate_password_hash
    import string, random

    user_table = table('user',
                       column('id', guid()),
                       column('username', String(255)),
                       column('email', String(255)),
                       column('password', String(255))
                       )

    import os
    from colorama import Fore
    bold = '\033[1m'
    end_bold = '\033[0m'

    superuser_name = 'superuser'
    superuser_password = ''.join(random.choice(string.ascii_uppercase) for i in range(10))
    superuser_email = os.getenv('SUPERUSER_EMAIL', 'superuser@consoto.com')

    user_name = 'normal_user'
    user_password = ''.join(random.choice(string.ascii_uppercase) for i in range(10))
    user_email = os.getenv('NORMAL_USER_EMAIL', 'user@consoto.com')

    print '* Generating {2}{0}SUPER_USER{1}{3}...'.format(
        bold,  # {0}
        end_bold,  # {1}
        Fore.YELLOW,  # {2}
        Fore.RESET  # {3}
    )
    print ' - {6}Username{7}: {5}{3}{0}{4}{7}\n - {6}Password{7}: {5}{3}{1}{4}{7}\n - {6}Email{7}: {5}{3}{2}{4}{7}'.format(
        superuser_name,
        superuser_password,
        superuser_email,
        bold,  # {3}
        end_bold,  # {4}
        Fore.GREEN,  # {5}
        Fore.YELLOW,  # {6}
        Fore.RESET  # {7}
    )

    print '* Generating {2}{0}NORMAL_USER{1}{3}...'.format(
        bold,  # {0}
        end_bold,  # {1}
        Fore.YELLOW,  # {2}
        Fore.RESET  # {3}
    )

    print ' - {6}Username{7}: {5}{3}{0}{4}{7}\n - {6}Password{7}: {5}{3}{1}{4}{7}\n - {6}Email{7}: {5}{3}{2}{4}{7}'.format(
        user_name,
        user_password,
        user_email,
        bold,  # {3}
        end_bold,  # {4}
        Fore.GREEN,  # {5}
        Fore.YELLOW,  # {6}
        Fore.RESET  # {7}
    )

    op.bulk_insert(user_table,
                   [
                       {
                           'id': super_user_uuid,
                           'username': superuser_name,
                           'email': superuser_email,
                           'password': generate_password_hash(superuser_password)
                       },
                       {
                           'id': user_uuid,
                           'username': user_name,
                           'email': user_email,
                           'password': generate_password_hash(user_password)
                       }
                   ])

    # Create user_roles
    user_roles_table = table('acl_user_role',
                             column('user_id', guid()),
                             column('role_id', guid()))

    op.bulk_insert(user_roles_table,
                   [
                       {
                           'user_id': super_user_uuid,
                           'role_id': super_user_role_uuid
                       }
                   ])

    # Create roles_resources
    role_resource_table = table('acl_role_resource',
                                column('role_id', guid()),
                                column('resource_name', String(255)),
                                column('privilege', Integer),
                                column('permission', Integer))

    from models.acl import Privilege, AclResource
    from libraries.acl import Permission

    op.bulk_insert(role_resource_table,
                   [
                       {
                           'role_id': super_user_role_uuid,
                           'resource_name': '*',
                           'privilege': Privilege.ADD | Privilege.VIEW | Privilege.DELETE | Privilege.UPDATE,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': owner_role_uuid,
                           'resource_name': '*',
                           'privilege': Privilege.ADD | Privilege.VIEW | Privilege.DELETE | Privilege.UPDATE,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.PRODUCT,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.CATEGORY,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       },
                       {
                           'role_id': user_role_uuid,
                           'resource_name': AclResource.USER,
                           'privilege': Privilege.VIEW,
                           'permission': Permission.ALLOW
                       }
                   ])

    pass
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###

    role_table = table('acl_role')
    op.execute(role_table.delete())

    user_table = table('user')
    op.execute(user_table.delete())

    pass
    ### end Alembic commands ###
